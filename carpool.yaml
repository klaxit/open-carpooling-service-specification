openapi: 3.0.1
info:
  title: ""
  description: ""
  version: 0.0.1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /carpoolJourneys:
    get:
      tags:
      - carpoolJourneys
      summary: Retourne les propositions de covoiturage.
      description: |
        WebService utilisé pour récupérer les trajets de covoiturage correspondant aux critères renseignés
      parameters:
      - name: departureLat
        in: query
        description: Latitude du point de départ de la recherche
        required: true
        schema:
          type: number
          format: double
      - name: departureLng
        in: query
        description: Longitude du point de départ de la recherche
        required: true
        schema:
          type: number
          format: double
      - name: arrivalLat
        in: query
        description: Latitude du point d'arrivée de la recherche
        required: true
        schema:
          type: number
          format: double
      - name: arrivalLng
        in: query
        description: Longitude du point d'arrivée de la recherche
        required: true
        schema:
          type: number
          format: double
      - name: carpoolerType
        in: query
        description: Type of the expected carpooler's journeys.
        schema:
          type: string
          enum:
          - DRIVER
          - PASSENGER
          - BOTH
          default: DRIVER
      - name: date
        in: query
        description: Timestamp unix UTC en secondes représentant la date de départ.
          Si ce paramètre n’est pas présent, on considère que la date sera le moment
          de la requête
        schema:
          type: integer
      - name: departureRadius
        in: query
        description: Rayon de recherche autour du point de départ, 1 km par defaut
        schema:
          type: number
          format: float
          default: 1.0
      - name: arrivalRadius
        in: query
        description: Rayon de recherche autour du point d'arrivée, 1 km par defaut
        schema:
          type: number
          format: float
          default: 1.0
      - name: timeDelta
        in: query
        description: Intervalle de temps en secondes, 900 par défaut. Cet intervalle
          détermine l'intervalle maximal entre l'heure de recherche et les trajets
          proposés
        schema:
          type: integer
          default: 900
      - name: count
        in: query
        description: Nombre maximal de trajets proposés. Par défaut l’opérateur renverra
          tous les trajets qu’il propose.
        schema:
          type: integer
      responses:
        200:
          description: L'ensemble de trajets proposés
          content:
            application/json:
              schema:
                title: CarpoolJourneys
                type: array
                description: Ensemble des trajets de covoiturage proposés
                items:
                  $ref: '#/components/schemas/CarpoolJourney'
        400:
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Requête incorrecte, les paramètres ne sont pas conformes
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Problème d’authentification.
        404:
          description: Contenu manquant.
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Il n’y a pas de contenu correspondant à la demande.
        429:
          description: Too Many Requests.
          headers:
            Retry-After:
              description: Intervalle de temps en secondes après lequel des requêtes
                peuvent être refaites
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Trop de requêtes dans un délai donné.
        500:
          description: Erreur serveur
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Erreur serveur.
  /status:
    get:
      tags:
      - status
      summary: Retourne les status du web service.
      description: |
        WebService utilisé pour récupérer le status du web service
      responses:
        200:
          description: L'ensemble de trajets proposés'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Ok
                description: Le web service est disponible
        429:
          description: Too Many Requests.
          headers:
            Retry-After:
              description: Intervalle de temps en secondes après lequel des requêtes
                peuvent être refaites
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Trop de requêtes dans un délai donné.
        500:
          description: Erreur serveur
          content:
            application/json:
              schema:
                type: object
                properties:
                  err_code:
                    type: string
                    description: Erreur serveur.
components:
  schemas:
    CarpoolJourney:
      title: CarpoolJourney
      required:
      - id
      - pickupDate
      - pickup
      - dropoff
      - type
      - webUrl
      type: object
      properties:
        id:
          type: string
          description: Identifiant du trajet (Obligatoire).
        pickupDate:
          type: number
          description: Unix UTC timestamp at the pick-up location.
          format: long
        pickup:
          $ref: '#/components/schemas/Geopoint'
          description: Carpooling pick-up location.
        dropoff:
          $ref: '#/components/schemas/Geopoint'
          description: Carpooling drop-off location.
        webUrl:
          type: string
          description: Url redirigeant vers le trajet sur le site du service (Obligatoire)
        type:
          type: string
          description: Type de trajet proposé. Plannifié, Dynamique (Autostop) ou
            Line (Obligatoire)
          enum:
          - PLANNED
          - DYNAMIC
          - LINE
        duration:
          type: integer
          description: If a driver journey, duration in seconds.
        distance:
          type: integer
          description: If a driver journey, distance in meters.
        departureToPickupWalkingTime:
          type: integer
          description: |-
            If a driver journey, walking time from
            the requested departure location to the pick-up location.
        dropoffToArrivalWalkingTime:
          type: integer
          description: |-
            If a driver journey, walking time to the
            requested arrival location from the drop-off location.
        departureToPickupWalkingDistance:
          type: integer
          description: |-
            If a driver journey, walking distance from
            the requested departure location to the pick-up location.
        dropoffToArrivalWalkingDistance:
          type: integer
          description: |-
            If a driver journey, walking distance to the
            requested arrival location from the drop-off location.
        journeyPolyline:
          type: string
          description: |-
            Carpooling journey itinerary as a
            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm).
        departureToPickupWalkingPolyline:
          type: string
          description: |-
            If a driver journey, walking
            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
            from the requested departure location to the pick-up location.
        dropoffToArrivalWalkingPolyline:
          type: string
          description: |-
            If a driver journey, walking
            [Google Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
            to the requested arrival location from the drop-off location.
        availableSeats:
          type: integer
          description: If a driver journey, available seats.
        requestedSeats:
          type: integer
          description: If a passenger journey, requested seats.
        price:
          $ref: '#/components/schemas/Price'
        driver:
          $ref: '#/components/schemas/Carpooler'
          description: If a driver journey, description of the driver.
        passenger:
          $ref: '#/components/schemas/Carpooler'
          description: If a passenger journey, description of the passenger.
        preferences:
          $ref: '#/components/schemas/Preferences'
        car:
          $ref: '#/components/schemas/Car'
        deepLink:
          $ref: '#/components/schemas/DeepLink'
        nbJourneys:
          type: integer
          description: Nombre de trajets renvoyés (seulement si l'attribut `type`
            = `LINE`)
      description: Données représentant un trajet de covoiturage.
    Price:
      type: object
      properties:
        type:
          type: string
          description: String représentant le type de trajet, soit « FREE », « PAYING
            » ou « UNKNOWN ». La valeur « UNKNOWN » est renvoyée quand le service
            n’est pas gratuit mais on ne connaît pas le prix du trajet.
          enum:
          - FREE
          - PAYING
          - UNKNOWN
        amount:
          type: number
          description: Prix du trajet en euros.
          format: float
      description: Objet représentant le prix du trajet.
    Carpooler:
      type: object
      required:
        - id
        - alias
      properties:
          id:
            type: string
            description: User's unique identifier.
          alias:
            type: string
            description: User's alias.
          firstName:
            type: string
            description: User's first name.
          lastName:
            type: string
            description: User's last name.
          grade:
            type: integer
            description: User's grade from 1 to 5.
          picture:
            type: string
            description: User's profile picture absolute URL.
          gender:
            type: string
            description: "User's gender. 'O' stands for 'Other'."
            enum:
              - F
              - M
              - O
    Geopoint:
      type: "object"
      required:
        - longitude
        - latitude
      properties:
        longitude:
          description: WGS84 longitude of the geographical point.
          type: number
        latitude:
          description: WGS84 latitude of the geographical point.
          type: number
        poiName:
          type: string
          description: Point-Of-Interest specific name if this geographical point is a POI.
    Preferences:
      type: object
      properties:
        smoking:
          type: boolean
          description: Détermine si le conducteur autorise de fumer dans sa voiture
        animals:
          type: boolean
          description: Détermine si le conducteur autorise des animaux dans sa voiture
        music:
          type: boolean
          description: Détermine si le conducteur autorise de la musique dans sa voiture
        isTalker:
          type: boolean
          description: Détermine si le conducteur aime bien parler avec les covoitureurs
        luggageSize:
          type: integer
          description: Entier de 1 à 5 indiquant la taille des bagages acceptés
      description: Object décrivant les préférences du conducteur
    Car:
      type: object
      properties:
        model:
          type: string
          description: Modèle de la voiture
        brand:
          type: string
          description: Marque de la voiture
      description: Object décrivant les préférences du conducteur
    DeepLink:
      type: object
      properties:
        android:
          $ref: '#/components/schemas/Android'
        ios:
          $ref: '#/components/schemas/IOS'
      description: Objet permettant d’ouvrir l’application du covoitureur depuis le
        site mobile. Si ce champ n’est pas présent, le lien « webUrl  » sera utilisé.
        Il faut bien noter que pour que cette redirection soit fonctionnelle, il faut
        que l’application présente sur les stores gère les deepLink (cf https://developer.android.com/training/app-indexing/deep-linking.html
        pour Android et https://dev.branch.io/getting-started/universal-app-links/guide/ios/
        pour iOS (version 10 ou ultérieure)).
    Android:
      type: object
      properties:
        uri:
          type: string
          description: Uri respectant les conventions Android pour pouvoir ouvrir
            l’application sur l’écran concernant le trajet en question (cf https://blog.branch.io/technical-guide-to-deep-linking-on-android-chrome-intents/).
        storeUrl:
          type: string
          description: Url de l’application sur le PlayStore en cas ou elle ne soit
            pas installée sur l’appareil
      description: Objet contenant les éléments nécessaires pour ouvrir l’application
        native depuis un navigateur mobile.
    IOS:
      type: object
      properties:
        universalLink:
          type: string
          description: Uri respectant les conventions iOS pour pouvoir ouvrir l’application
            sur l’écran concernant le trajet en question.
      description: Objet contenant les éléments nécessaires pour ouvrir l’application
        native depuis un navigateur mobile. Un objet « ios » est composé de
